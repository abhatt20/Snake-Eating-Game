# Date: 10/23/21
# Author: Aryan Bhatt
# This program simulates the classical snake eating game.

# Import the turtle module.
import turtle

# Import the random module.
import random

# Import the time module.
import time


# Create the game screen.
screen = turtle.Screen()

# Set the title for the window.
screen.title('Snake Eating Game')

# Set the respective dimensions for the window.
screen.setup(width = 1920, height = 1080)

# Set the animation for the snake.
screen.tracer(0)

# Set the background color for the window.
turtle.bgcolor('red')

# Create the border for the game.
turtle.speed(5)
turtle.pensize(4)
turtle.penup()
turtle.goto(-310,250)
turtle.pendown()
turtle.color('blue')
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.right(90)
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.penup()
turtle.hideturtle()

# Create a score system for the game.
score = 0
delay = 0.1

# Create the snake's attributes.
snake = turtle.Turtle()
snake.speed(3)
snake.shape('arrow')
snake.color("black")
snake.penup()
snake.goto(0,0)
snake.direction = 'stop'

# Create the attributes of the food that the snake will consume.
fruit = turtle.Turtle()
fruit.speed(0)
fruit.shape('circle')
fruit.color('orange')
fruit.penup()
fruit.goto(30,30)
old_fruit=[]

# Create the scoring system.
scoring = turtle.Turtle()
scoring.speed(0)
scoring.color("black")
scoring.penup()
scoring.hideturtle()
scoring.goto(0,300)
scoring.write("Score :",align="center",font=("Courier",24,"bold"))



# These set of functions govern the snake's movement in the game.
def snake_go_up():

    if snake.direction != "down":
        snake.direction = "up"



def snake_go_down():

    if snake.direction != "up":
        snake.direction = "down"



def snake_go_left():

    if snake.direction != "right":
        snake.direction = "left"



def snake_go_right():

    if snake.direction != "left":
        snake.direction = "right"



def snake_move():

    if snake.direction == "up":
        y = snake.ycor()
        snake.sety(y + 20)


    if snake.direction == "down":
        y = snake.ycor()
        snake.sety(y - 20)


    if snake.direction == "left":
        x = snake.xcor()
        snake.setx(x - 20)


    if snake.direction == "right":
        x = snake.xcor()
        snake.setx(x + 20)

# Set the controls for the game.
screen.listen()
screen.onkeypress(snake_go_up, "Up")
screen.onkeypress(snake_go_down, "Down")
screen.onkeypress(snake_go_left, "Left")
screen.onkeypress(snake_go_right, "Right")



# The while loop regulates the flow of the game preventing any sudden interruptions.
while True:

        # Update the screen.
        screen.update()
        
        
        # Snake and fruit coliisions
        if snake.distance(fruit)< 20:
                x = random.randint(-290,270)
                y = random.randint(-240,240)
                fruit.goto(x,y)
                scoring.clear()
                score+=1
                scoring.write("Score:{}".format(score),align="center",font=("Courier",24,"bold"))
                delay-=0.001
                
                # Creating new_ball
                new_fruit = turtle.Turtle()
                new_fruit.speed(0)
                new_fruit.shape('arrow')
                new_fruit.color('black')
                new_fruit.penup()
                old_fruit.append(new_fruit)
                


        # Adding ball to snake
        
        for index in range(len(old_fruit)-1,0,-1):
                a = old_fruit[index-1].xcor()
                b = old_fruit[index-1].ycor()

                old_fruit[index].goto(a,b)
                   
                   
        if len(old_fruit)>0:
                a= snake.xcor()
                b = snake.ycor()
                old_fruit[0].goto(a,b)
        snake_move()


        # Snake and border collision    
        if snake.xcor()>280 or snake.xcor()< -300 or snake.ycor()>240 or snake.ycor()<-240:
                time.sleep(1)
                screen.clear()
                screen.bgcolor('green')
                scoring.goto(0,0)
                scoring.write(" GAME OVER \nYour Score is {}".format(score),align="center",font=("Times New Roman",30,"bold"))



        # Snake collision
        for food in old_fruit:
        
        
                if food.distance(snake) < 20:
                        time.sleep(1)
                        screen.clear()
                        screen.bgcolor('green')
                        scoring.goto(0,0)
                        scoring.write(" GAME OVER \nYour Score is {}".format(score),align="center",font=("Times New Roman",30,"bold"))
     
        time.sleep(delay)

# End the game.
turtle.Terminator()
